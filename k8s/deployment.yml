apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer-deployment
  labels:
    app: consumer
spec:
  replicas: 3
  selector:
    matchLabels:
      app: consumer
  template:
    metadata:
      labels:
        app: consumer
    spec:
      containers:
        - name: consumer
          image: danmory/messaging-consumer:latest
          env:
            - name: QUEUE_HOST
              value: rabbitmq-service
            - name: QUEUE_PORT
              value: "5672"
            - name: QUEUE_USER
              value: guest
            - name: QUEUE_PASS
              value: guest
            - name: DB_HOST
              value: db
            - name: DB_PORT
              value: "5432"
            - name: DB_USER
              value: postgres
            - name: DB_PASS
              value: postgres
            - name: DB_NAME
              value: messages
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: producer-deployment
  labels:
    app: producer
spec:
  selector:
    matchLabels:
      app: producer
  template:
    metadata:
      labels:
        app: producer
    spec:
      containers:
        - name: producer
          image: danmory/messaging-producer:latest
          env:
            - name: QUEUE_HOST
              value: rabbitmq-service
            - name: QUEUE_PORT
              value: "5672"
            - name: QUEUE_USER
              value: guest
            - name: QUEUE_PASS
              value: guest
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq-statefulset
  labels:
    app: rabbitmq
spec:
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management
          ports:
            - containerPort: 5672
            - containerPort: 15672
          volumeMounts:
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq/mnesia
  volumeClaimTemplates:
    - metadata:
        name: rabbitmq-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
spec:
  selector:
    app: rabbitmq
  ports:
    - name: rabbitmq-port
      protocol: TCP
      port: 5672
      targetPort: 5672
    - name: rabbitmq-management-port
      protocol: TCP
      port: 15672
      targetPort: 15672
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-initdb-config
data:
  init.sql: |
    CREATE TABLE IF NOT EXISTS table1 (
    message VARCHAR NOT NULL
    );
    CREATE TABLE IF NOT EXISTS table2 (
        message VARCHAR NOT NULL
    );
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-statefulset
  labels:
    app: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  serviceName: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_DB
              value: messages
          volumeMounts:
            - name: postgres-persistent-storage
              mountPath: /var/lib/postgresql/data
            - mountPath: /docker-entrypoint-initdb.d
              name: postgresql-initdb
      volumes:
      - name: postgresql-initdb
        configMap:
          name: postgres-initdb-config
  volumeClaimTemplates:
    - metadata:
        name: postgres-persistent-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

